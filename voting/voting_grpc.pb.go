// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: voting.proto

package voting

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Voting_SayHello_FullMethodName       = "/Voting/SayHello"
	Voting_RegisterVoter_FullMethodName  = "/Voting/RegisterVoter"
	Voting_PreAuth_FullMethodName        = "/Voting/PreAuth"
	Voting_Auth_FullMethodName           = "/Voting/Auth"
	Voting_CreateElection_FullMethodName = "/Voting/CreateElection"
	Voting_CastVote_FullMethodName       = "/Voting/CastVote"
	Voting_GetResult_FullMethodName      = "/Voting/GetResult"
)

// VotingClient is the client API for Voting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VotingClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	RegisterVoter(ctx context.Context, in *Voter, opts ...grpc.CallOption) (*Status, error)
	PreAuth(ctx context.Context, in *VoterName, opts ...grpc.CallOption) (*Challenge, error)
	Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthToken, error)
	CreateElection(ctx context.Context, in *Election, opts ...grpc.CallOption) (*Status, error)
	CastVote(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*Status, error)
	GetResult(ctx context.Context, in *ElectionName, opts ...grpc.CallOption) (*ElectionResult, error)
}

type votingClient struct {
	cc grpc.ClientConnInterface
}

func NewVotingClient(cc grpc.ClientConnInterface) VotingClient {
	return &votingClient{cc}
}

func (c *votingClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Voting_SayHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingClient) RegisterVoter(ctx context.Context, in *Voter, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, Voting_RegisterVoter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingClient) PreAuth(ctx context.Context, in *VoterName, opts ...grpc.CallOption) (*Challenge, error) {
	out := new(Challenge)
	err := c.cc.Invoke(ctx, Voting_PreAuth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingClient) Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthToken, error) {
	out := new(AuthToken)
	err := c.cc.Invoke(ctx, Voting_Auth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingClient) CreateElection(ctx context.Context, in *Election, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, Voting_CreateElection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingClient) CastVote(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, Voting_CastVote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingClient) GetResult(ctx context.Context, in *ElectionName, opts ...grpc.CallOption) (*ElectionResult, error) {
	out := new(ElectionResult)
	err := c.cc.Invoke(ctx, Voting_GetResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VotingServer is the server API for Voting service.
// All implementations must embed UnimplementedVotingServer
// for forward compatibility
type VotingServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	RegisterVoter(context.Context, *Voter) (*Status, error)
	PreAuth(context.Context, *VoterName) (*Challenge, error)
	Auth(context.Context, *AuthRequest) (*AuthToken, error)
	CreateElection(context.Context, *Election) (*Status, error)
	CastVote(context.Context, *Vote) (*Status, error)
	GetResult(context.Context, *ElectionName) (*ElectionResult, error)
	mustEmbedUnimplementedVotingServer()
}

// UnimplementedVotingServer must be embedded to have forward compatible implementations.
type UnimplementedVotingServer struct {
}

func (UnimplementedVotingServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedVotingServer) RegisterVoter(context.Context, *Voter) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterVoter not implemented")
}
func (UnimplementedVotingServer) PreAuth(context.Context, *VoterName) (*Challenge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreAuth not implemented")
}
func (UnimplementedVotingServer) Auth(context.Context, *AuthRequest) (*AuthToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedVotingServer) CreateElection(context.Context, *Election) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateElection not implemented")
}
func (UnimplementedVotingServer) CastVote(context.Context, *Vote) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CastVote not implemented")
}
func (UnimplementedVotingServer) GetResult(context.Context, *ElectionName) (*ElectionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResult not implemented")
}
func (UnimplementedVotingServer) mustEmbedUnimplementedVotingServer() {}

// UnsafeVotingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VotingServer will
// result in compilation errors.
type UnsafeVotingServer interface {
	mustEmbedUnimplementedVotingServer()
}

func RegisterVotingServer(s grpc.ServiceRegistrar, srv VotingServer) {
	s.RegisterService(&Voting_ServiceDesc, srv)
}

func _Voting_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Voting_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voting_RegisterVoter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Voter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).RegisterVoter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Voting_RegisterVoter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).RegisterVoter(ctx, req.(*Voter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voting_PreAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoterName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).PreAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Voting_PreAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).PreAuth(ctx, req.(*VoterName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voting_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Voting_Auth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).Auth(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voting_CreateElection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Election)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).CreateElection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Voting_CreateElection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).CreateElection(ctx, req.(*Election))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voting_CastVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).CastVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Voting_CastVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).CastVote(ctx, req.(*Vote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voting_GetResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).GetResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Voting_GetResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).GetResult(ctx, req.(*ElectionName))
	}
	return interceptor(ctx, in, info, handler)
}

// Voting_ServiceDesc is the grpc.ServiceDesc for Voting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Voting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Voting",
	HandlerType: (*VotingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Voting_SayHello_Handler,
		},
		{
			MethodName: "RegisterVoter",
			Handler:    _Voting_RegisterVoter_Handler,
		},
		{
			MethodName: "PreAuth",
			Handler:    _Voting_PreAuth_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _Voting_Auth_Handler,
		},
		{
			MethodName: "CreateElection",
			Handler:    _Voting_CreateElection_Handler,
		},
		{
			MethodName: "CastVote",
			Handler:    _Voting_CastVote_Handler,
		},
		{
			MethodName: "GetResult",
			Handler:    _Voting_GetResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "voting.proto",
}
